// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBufMsg.proto

#ifndef PROTOBUF_ProtoBufMsg_2eproto__INCLUDED
#define PROTOBUF_ProtoBufMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ProtoBufMsg_2eproto();
void protobuf_AssignDesc_ProtoBufMsg_2eproto();
void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

class DataRequest;
class MarketUpdate;
class MessageBase;

enum MsgType {
  TYPE_MARKETUPDATE = 0,
  TYPE_DATAREQUEST = 1,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = TYPE_MARKETUPDATE;
const MsgType MsgType_MAX = TYPE_DATAREQUEST;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class MessageBase : public ::google::protobuf::Message {
 public:
  MessageBase();
  virtual ~MessageBase();

  MessageBase(const MessageBase& from);

  inline MessageBase& operator=(const MessageBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBase& default_instance();

  void Swap(MessageBase* other);

  // implements Message ----------------------------------------------

  inline MessageBase* New() const { return New(NULL); }

  MessageBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageBase& from);
  void MergeFrom(const MessageBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::MsgType type() const;
  void set_type(::MsgType value);

  // optional bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:MessageBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoBufMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoBufMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

  void InitAsDefaultInstance();
  static MessageBase* default_instance_;
};
// -------------------------------------------------------------------

class MarketUpdate : public ::google::protobuf::Message {
 public:
  MarketUpdate();
  virtual ~MarketUpdate();

  MarketUpdate(const MarketUpdate& from);

  inline MarketUpdate& operator=(const MarketUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketUpdate& default_instance();

  void Swap(MarketUpdate* other);

  // implements Message ----------------------------------------------

  inline MarketUpdate* New() const { return New(NULL); }

  MarketUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketUpdate& from);
  void MergeFrom(const MarketUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarketUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional double open_price = 4;
  void clear_open_price();
  static const int kOpenPriceFieldNumber = 4;
  double open_price() const;
  void set_open_price(double value);

  // optional double last_price = 5;
  void clear_last_price();
  static const int kLastPriceFieldNumber = 5;
  double last_price() const;
  void set_last_price(double value);

  // optional double highest_price = 6;
  void clear_highest_price();
  static const int kHighestPriceFieldNumber = 6;
  double highest_price() const;
  void set_highest_price(double value);

  // optional double lowest_price = 7;
  void clear_lowest_price();
  static const int kLowestPriceFieldNumber = 7;
  double lowest_price() const;
  void set_lowest_price(double value);

  // optional double high_limit_price = 8;
  void clear_high_limit_price();
  static const int kHighLimitPriceFieldNumber = 8;
  double high_limit_price() const;
  void set_high_limit_price(double value);

  // optional double low_limit_price = 9;
  void clear_low_limit_price();
  static const int kLowLimitPriceFieldNumber = 9;
  double low_limit_price() const;
  void set_low_limit_price(double value);

  // optional int32 open_interest = 10;
  void clear_open_interest();
  static const int kOpenInterestFieldNumber = 10;
  ::google::protobuf::int32 open_interest() const;
  void set_open_interest(::google::protobuf::int32 value);

  // optional double turnover = 11;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 11;
  double turnover() const;
  void set_turnover(double value);

  // optional int32 volume = 12;
  void clear_volume();
  static const int kVolumeFieldNumber = 12;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional string exchange_timestamp = 13;
  void clear_exchange_timestamp();
  static const int kExchangeTimestampFieldNumber = 13;
  const ::std::string& exchange_timestamp() const;
  void set_exchange_timestamp(const ::std::string& value);
  void set_exchange_timestamp(const char* value);
  void set_exchange_timestamp(const char* value, size_t size);
  ::std::string* mutable_exchange_timestamp();
  ::std::string* release_exchange_timestamp();
  void set_allocated_exchange_timestamp(::std::string* exchange_timestamp);

  // optional string recv_timestamp = 14;
  void clear_recv_timestamp();
  static const int kRecvTimestampFieldNumber = 14;
  const ::std::string& recv_timestamp() const;
  void set_recv_timestamp(const ::std::string& value);
  void set_recv_timestamp(const char* value);
  void set_recv_timestamp(const char* value, size_t size);
  ::std::string* mutable_recv_timestamp();
  ::std::string* release_recv_timestamp();
  void set_allocated_recv_timestamp(::std::string* recv_timestamp);

  // repeated double bid_price = 15;
  int bid_price_size() const;
  void clear_bid_price();
  static const int kBidPriceFieldNumber = 15;
  double bid_price(int index) const;
  void set_bid_price(int index, double value);
  void add_bid_price(double value);
  const ::google::protobuf::RepeatedField< double >&
      bid_price() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_bid_price();

  // repeated int32 bid_volume = 16;
  int bid_volume_size() const;
  void clear_bid_volume();
  static const int kBidVolumeFieldNumber = 16;
  ::google::protobuf::int32 bid_volume(int index) const;
  void set_bid_volume(int index, ::google::protobuf::int32 value);
  void add_bid_volume(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bid_volume() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bid_volume();

  // repeated double ask_price = 17;
  int ask_price_size() const;
  void clear_ask_price();
  static const int kAskPriceFieldNumber = 17;
  double ask_price(int index) const;
  void set_ask_price(int index, double value);
  void add_ask_price(double value);
  const ::google::protobuf::RepeatedField< double >&
      ask_price() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ask_price();

  // repeated int32 ask_volume = 18;
  int ask_volume_size() const;
  void clear_ask_volume();
  static const int kAskVolumeFieldNumber = 18;
  ::google::protobuf::int32 ask_volume(int index) const;
  void set_ask_volume(int index, ::google::protobuf::int32 value);
  void add_ask_volume(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ask_volume() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ask_volume();

  // @@protoc_insertion_point(class_scope:MarketUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  double open_price_;
  double last_price_;
  double highest_price_;
  double lowest_price_;
  double high_limit_price_;
  double low_limit_price_;
  double turnover_;
  ::google::protobuf::int32 open_interest_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::internal::ArenaStringPtr exchange_timestamp_;
  ::google::protobuf::internal::ArenaStringPtr recv_timestamp_;
  ::google::protobuf::RepeatedField< double > bid_price_;
  mutable int _bid_price_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bid_volume_;
  mutable int _bid_volume_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > ask_price_;
  mutable int _ask_price_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ask_volume_;
  mutable int _ask_volume_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoBufMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoBufMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

  void InitAsDefaultInstance();
  static MarketUpdate* default_instance_;
};
// -------------------------------------------------------------------

class DataRequest : public ::google::protobuf::Message {
 public:
  DataRequest();
  virtual ~DataRequest();

  DataRequest(const DataRequest& from);

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRequest& default_instance();

  void Swap(DataRequest* other);

  // implements Message ----------------------------------------------

  inline DataRequest* New() const { return New(NULL); }

  DataRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string data_type = 4;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  const ::std::string& data_type() const;
  void set_data_type(const ::std::string& value);
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  ::std::string* mutable_data_type();
  ::std::string* release_data_type();
  void set_allocated_data_type(::std::string* data_type);

  // @@protoc_insertion_point(class_scope:DataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr data_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoBufMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoBufMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

  void InitAsDefaultInstance();
  static DataRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageBase

// optional .MsgType type = 1;
inline void MessageBase::clear_type() {
  type_ = 0;
}
inline ::MsgType MessageBase::type() const {
  // @@protoc_insertion_point(field_get:MessageBase.type)
  return static_cast< ::MsgType >(type_);
}
inline void MessageBase::set_type(::MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MessageBase.type)
}

// optional bytes msg = 2;
inline void MessageBase::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageBase::msg() const {
  // @@protoc_insertion_point(field_get:MessageBase.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBase::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageBase.msg)
}
inline void MessageBase::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageBase.msg)
}
inline void MessageBase::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageBase.msg)
}
inline ::std::string* MessageBase::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:MessageBase.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageBase::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBase::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:MessageBase.msg)
}

// -------------------------------------------------------------------

// MarketUpdate

// optional string code = 1;
inline void MarketUpdate::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::code() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.code)
}
inline void MarketUpdate::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.code)
}
inline void MarketUpdate::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.code)
}
inline ::std::string* MarketUpdate::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_code() {
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.code)
}

// optional string symbol = 2;
inline void MarketUpdate::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::symbol() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.symbol)
}
inline void MarketUpdate::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.symbol)
}
inline void MarketUpdate::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.symbol)
}
inline ::std::string* MarketUpdate::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.symbol)
}

// optional string exchange = 3;
inline void MarketUpdate::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::exchange() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.exchange)
}
inline void MarketUpdate::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.exchange)
}
inline void MarketUpdate::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.exchange)
}
inline ::std::string* MarketUpdate::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_exchange() {
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.exchange)
}

// optional double open_price = 4;
inline void MarketUpdate::clear_open_price() {
  open_price_ = 0;
}
inline double MarketUpdate::open_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.open_price)
  return open_price_;
}
inline void MarketUpdate::set_open_price(double value) {
  
  open_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.open_price)
}

// optional double last_price = 5;
inline void MarketUpdate::clear_last_price() {
  last_price_ = 0;
}
inline double MarketUpdate::last_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.last_price)
  return last_price_;
}
inline void MarketUpdate::set_last_price(double value) {
  
  last_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.last_price)
}

// optional double highest_price = 6;
inline void MarketUpdate::clear_highest_price() {
  highest_price_ = 0;
}
inline double MarketUpdate::highest_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.highest_price)
  return highest_price_;
}
inline void MarketUpdate::set_highest_price(double value) {
  
  highest_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.highest_price)
}

// optional double lowest_price = 7;
inline void MarketUpdate::clear_lowest_price() {
  lowest_price_ = 0;
}
inline double MarketUpdate::lowest_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.lowest_price)
  return lowest_price_;
}
inline void MarketUpdate::set_lowest_price(double value) {
  
  lowest_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.lowest_price)
}

// optional double high_limit_price = 8;
inline void MarketUpdate::clear_high_limit_price() {
  high_limit_price_ = 0;
}
inline double MarketUpdate::high_limit_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.high_limit_price)
  return high_limit_price_;
}
inline void MarketUpdate::set_high_limit_price(double value) {
  
  high_limit_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.high_limit_price)
}

// optional double low_limit_price = 9;
inline void MarketUpdate::clear_low_limit_price() {
  low_limit_price_ = 0;
}
inline double MarketUpdate::low_limit_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.low_limit_price)
  return low_limit_price_;
}
inline void MarketUpdate::set_low_limit_price(double value) {
  
  low_limit_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.low_limit_price)
}

// optional int32 open_interest = 10;
inline void MarketUpdate::clear_open_interest() {
  open_interest_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::open_interest() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.open_interest)
  return open_interest_;
}
inline void MarketUpdate::set_open_interest(::google::protobuf::int32 value) {
  
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.open_interest)
}

// optional double turnover = 11;
inline void MarketUpdate::clear_turnover() {
  turnover_ = 0;
}
inline double MarketUpdate::turnover() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.turnover)
  return turnover_;
}
inline void MarketUpdate::set_turnover(double value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.turnover)
}

// optional int32 volume = 12;
inline void MarketUpdate::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::volume() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.volume)
  return volume_;
}
inline void MarketUpdate::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.volume)
}

// optional string exchange_timestamp = 13;
inline void MarketUpdate::clear_exchange_timestamp() {
  exchange_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::exchange_timestamp() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.exchange_timestamp)
  return exchange_timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_exchange_timestamp(const ::std::string& value) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.exchange_timestamp)
}
inline void MarketUpdate::set_exchange_timestamp(const char* value) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.exchange_timestamp)
}
inline void MarketUpdate::set_exchange_timestamp(const char* value, size_t size) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.exchange_timestamp)
}
inline ::std::string* MarketUpdate::mutable_exchange_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.exchange_timestamp)
  return exchange_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_exchange_timestamp() {
  
  return exchange_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_exchange_timestamp(::std::string* exchange_timestamp) {
  if (exchange_timestamp != NULL) {
    
  } else {
    
  }
  exchange_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_timestamp);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.exchange_timestamp)
}

// optional string recv_timestamp = 14;
inline void MarketUpdate::clear_recv_timestamp() {
  recv_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::recv_timestamp() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.recv_timestamp)
  return recv_timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_recv_timestamp(const ::std::string& value) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.recv_timestamp)
}
inline void MarketUpdate::set_recv_timestamp(const char* value) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.recv_timestamp)
}
inline void MarketUpdate::set_recv_timestamp(const char* value, size_t size) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.recv_timestamp)
}
inline ::std::string* MarketUpdate::mutable_recv_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.recv_timestamp)
  return recv_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_recv_timestamp() {
  
  return recv_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_recv_timestamp(::std::string* recv_timestamp) {
  if (recv_timestamp != NULL) {
    
  } else {
    
  }
  recv_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_timestamp);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.recv_timestamp)
}

// repeated double bid_price = 15;
inline int MarketUpdate::bid_price_size() const {
  return bid_price_.size();
}
inline void MarketUpdate::clear_bid_price() {
  bid_price_.Clear();
}
inline double MarketUpdate::bid_price(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.bid_price)
  return bid_price_.Get(index);
}
inline void MarketUpdate::set_bid_price(int index, double value) {
  bid_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.bid_price)
}
inline void MarketUpdate::add_bid_price(double value) {
  bid_price_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.bid_price)
}
inline const ::google::protobuf::RepeatedField< double >&
MarketUpdate::bid_price() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.bid_price)
  return bid_price_;
}
inline ::google::protobuf::RepeatedField< double >*
MarketUpdate::mutable_bid_price() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.bid_price)
  return &bid_price_;
}

// repeated int32 bid_volume = 16;
inline int MarketUpdate::bid_volume_size() const {
  return bid_volume_.size();
}
inline void MarketUpdate::clear_bid_volume() {
  bid_volume_.Clear();
}
inline ::google::protobuf::int32 MarketUpdate::bid_volume(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.bid_volume)
  return bid_volume_.Get(index);
}
inline void MarketUpdate::set_bid_volume(int index, ::google::protobuf::int32 value) {
  bid_volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.bid_volume)
}
inline void MarketUpdate::add_bid_volume(::google::protobuf::int32 value) {
  bid_volume_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.bid_volume)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarketUpdate::bid_volume() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.bid_volume)
  return bid_volume_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarketUpdate::mutable_bid_volume() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.bid_volume)
  return &bid_volume_;
}

// repeated double ask_price = 17;
inline int MarketUpdate::ask_price_size() const {
  return ask_price_.size();
}
inline void MarketUpdate::clear_ask_price() {
  ask_price_.Clear();
}
inline double MarketUpdate::ask_price(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.ask_price)
  return ask_price_.Get(index);
}
inline void MarketUpdate::set_ask_price(int index, double value) {
  ask_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.ask_price)
}
inline void MarketUpdate::add_ask_price(double value) {
  ask_price_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.ask_price)
}
inline const ::google::protobuf::RepeatedField< double >&
MarketUpdate::ask_price() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.ask_price)
  return ask_price_;
}
inline ::google::protobuf::RepeatedField< double >*
MarketUpdate::mutable_ask_price() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.ask_price)
  return &ask_price_;
}

// repeated int32 ask_volume = 18;
inline int MarketUpdate::ask_volume_size() const {
  return ask_volume_.size();
}
inline void MarketUpdate::clear_ask_volume() {
  ask_volume_.Clear();
}
inline ::google::protobuf::int32 MarketUpdate::ask_volume(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.ask_volume)
  return ask_volume_.Get(index);
}
inline void MarketUpdate::set_ask_volume(int index, ::google::protobuf::int32 value) {
  ask_volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.ask_volume)
}
inline void MarketUpdate::add_ask_volume(::google::protobuf::int32 value) {
  ask_volume_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.ask_volume)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarketUpdate::ask_volume() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.ask_volume)
  return ask_volume_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarketUpdate::mutable_ask_volume() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.ask_volume)
  return &ask_volume_;
}

// -------------------------------------------------------------------

// DataRequest

// optional string code = 1;
inline void DataRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::code() const {
  // @@protoc_insertion_point(field_get:DataRequest.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.code)
}
inline void DataRequest::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.code)
}
inline void DataRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.code)
}
inline ::std::string* DataRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_code() {
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.code)
}

// optional string symbol = 2;
inline void DataRequest::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::symbol() const {
  // @@protoc_insertion_point(field_get:DataRequest.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.symbol)
}
inline void DataRequest::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.symbol)
}
inline void DataRequest::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.symbol)
}
inline ::std::string* DataRequest::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.symbol)
}

// optional string exchange = 3;
inline void DataRequest::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::exchange() const {
  // @@protoc_insertion_point(field_get:DataRequest.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.exchange)
}
inline void DataRequest::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.exchange)
}
inline void DataRequest::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.exchange)
}
inline ::std::string* DataRequest::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_exchange() {
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.exchange)
}

// optional string data_type = 4;
inline void DataRequest::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::data_type() const {
  // @@protoc_insertion_point(field_get:DataRequest.data_type)
  return data_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.data_type)
}
inline void DataRequest::set_data_type(const char* value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.data_type)
}
inline void DataRequest::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.data_type)
}
inline ::std::string* DataRequest::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_data_type() {
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.data_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgType>() {
  return ::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBufMsg_2eproto__INCLUDED
