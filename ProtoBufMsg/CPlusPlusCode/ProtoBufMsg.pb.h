// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBufMsg.proto

#ifndef PROTOBUF_ProtoBufMsg_2eproto__INCLUDED
#define PROTOBUF_ProtoBufMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ProtoBufMsg_2eproto();
void protobuf_AssignDesc_ProtoBufMsg_2eproto();
void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

class DataRequest;
class IndexData;
class MarketUpdate;
class MessageBase;
class Transaction;

enum MsgType {
  TYPE_DATAREQUEST = 0,
  TYPE_MARKETUPDATE = 1,
  TYPE_TRANSACTION = 2,
  TYPE_INDEX_DATA = 3,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = TYPE_DATAREQUEST;
const MsgType MsgType_MAX = TYPE_INDEX_DATA;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class MessageBase : public ::google::protobuf::Message {
 public:
  MessageBase();
  virtual ~MessageBase();

  MessageBase(const MessageBase& from);

  inline MessageBase& operator=(const MessageBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBase& default_instance();

  void Swap(MessageBase* other);

  // implements Message ----------------------------------------------

  inline MessageBase* New() const { return New(NULL); }

  MessageBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageBase& from);
  void MergeFrom(const MessageBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::MsgType type() const;
  void set_type(::MsgType value);

  // optional bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:MessageBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoBufMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoBufMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

  void InitAsDefaultInstance();
  static MessageBase* default_instance_;
};
// -------------------------------------------------------------------

class MarketUpdate : public ::google::protobuf::Message {
 public:
  MarketUpdate();
  virtual ~MarketUpdate();

  MarketUpdate(const MarketUpdate& from);

  inline MarketUpdate& operator=(const MarketUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketUpdate& default_instance();

  void Swap(MarketUpdate* other);

  // implements Message ----------------------------------------------

  inline MarketUpdate* New() const { return New(NULL); }

  MarketUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketUpdate& from);
  void MergeFrom(const MarketUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarketUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional int32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 pre_close = 5;
  void clear_pre_close();
  static const int kPreCloseFieldNumber = 5;
  ::google::protobuf::int32 pre_close() const;
  void set_pre_close(::google::protobuf::int32 value);

  // optional double open_price = 6;
  void clear_open_price();
  static const int kOpenPriceFieldNumber = 6;
  double open_price() const;
  void set_open_price(double value);

  // optional double last_price = 7;
  void clear_last_price();
  static const int kLastPriceFieldNumber = 7;
  double last_price() const;
  void set_last_price(double value);

  // optional double highest_price = 8;
  void clear_highest_price();
  static const int kHighestPriceFieldNumber = 8;
  double highest_price() const;
  void set_highest_price(double value);

  // optional double lowest_price = 9;
  void clear_lowest_price();
  static const int kLowestPriceFieldNumber = 9;
  double lowest_price() const;
  void set_lowest_price(double value);

  // optional double high_limit_price = 10;
  void clear_high_limit_price();
  static const int kHighLimitPriceFieldNumber = 10;
  double high_limit_price() const;
  void set_high_limit_price(double value);

  // optional double low_limit_price = 11;
  void clear_low_limit_price();
  static const int kLowLimitPriceFieldNumber = 11;
  double low_limit_price() const;
  void set_low_limit_price(double value);

  // optional int32 open_interest = 12;
  void clear_open_interest();
  static const int kOpenInterestFieldNumber = 12;
  ::google::protobuf::int32 open_interest() const;
  void set_open_interest(::google::protobuf::int32 value);

  // optional double latest_price = 13;
  void clear_latest_price();
  static const int kLatestPriceFieldNumber = 13;
  double latest_price() const;
  void set_latest_price(double value);

  // optional int32 num_trades = 14;
  void clear_num_trades();
  static const int kNumTradesFieldNumber = 14;
  ::google::protobuf::int32 num_trades() const;
  void set_num_trades(::google::protobuf::int32 value);

  // optional double turnover = 15;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 15;
  double turnover() const;
  void set_turnover(double value);

  // optional int64 volume = 16;
  void clear_volume();
  static const int kVolumeFieldNumber = 16;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional int64 total_bid_vol = 17;
  void clear_total_bid_vol();
  static const int kTotalBidVolFieldNumber = 17;
  ::google::protobuf::int64 total_bid_vol() const;
  void set_total_bid_vol(::google::protobuf::int64 value);

  // optional int64 total_ask_vol = 18;
  void clear_total_ask_vol();
  static const int kTotalAskVolFieldNumber = 18;
  ::google::protobuf::int64 total_ask_vol() const;
  void set_total_ask_vol(::google::protobuf::int64 value);

  // optional int32 weighted_avg_bid_price = 19;
  void clear_weighted_avg_bid_price();
  static const int kWeightedAvgBidPriceFieldNumber = 19;
  ::google::protobuf::int32 weighted_avg_bid_price() const;
  void set_weighted_avg_bid_price(::google::protobuf::int32 value);

  // optional int32 weighted_avg_ask_price = 20;
  void clear_weighted_avg_ask_price();
  static const int kWeightedAvgAskPriceFieldNumber = 20;
  ::google::protobuf::int32 weighted_avg_ask_price() const;
  void set_weighted_avg_ask_price(::google::protobuf::int32 value);

  // optional int32 iopv = 21;
  void clear_iopv();
  static const int kIopvFieldNumber = 21;
  ::google::protobuf::int32 iopv() const;
  void set_iopv(::google::protobuf::int32 value);

  // optional int32 yield_to_maturity = 22;
  void clear_yield_to_maturity();
  static const int kYieldToMaturityFieldNumber = 22;
  ::google::protobuf::int32 yield_to_maturity() const;
  void set_yield_to_maturity(::google::protobuf::int32 value);

  // optional int32 action_day = 23;
  void clear_action_day();
  static const int kActionDayFieldNumber = 23;
  ::google::protobuf::int32 action_day() const;
  void set_action_day(::google::protobuf::int32 value);

  // optional string exchange_timestamp = 24;
  void clear_exchange_timestamp();
  static const int kExchangeTimestampFieldNumber = 24;
  const ::std::string& exchange_timestamp() const;
  void set_exchange_timestamp(const ::std::string& value);
  void set_exchange_timestamp(const char* value);
  void set_exchange_timestamp(const char* value, size_t size);
  ::std::string* mutable_exchange_timestamp();
  ::std::string* release_exchange_timestamp();
  void set_allocated_exchange_timestamp(::std::string* exchange_timestamp);

  // optional string recv_timestamp = 25;
  void clear_recv_timestamp();
  static const int kRecvTimestampFieldNumber = 25;
  const ::std::string& recv_timestamp() const;
  void set_recv_timestamp(const ::std::string& value);
  void set_recv_timestamp(const char* value);
  void set_recv_timestamp(const char* value, size_t size);
  ::std::string* mutable_recv_timestamp();
  ::std::string* release_recv_timestamp();
  void set_allocated_recv_timestamp(::std::string* recv_timestamp);

  // repeated double bid_price = 26;
  int bid_price_size() const;
  void clear_bid_price();
  static const int kBidPriceFieldNumber = 26;
  double bid_price(int index) const;
  void set_bid_price(int index, double value);
  void add_bid_price(double value);
  const ::google::protobuf::RepeatedField< double >&
      bid_price() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_bid_price();

  // repeated int32 bid_volume = 27;
  int bid_volume_size() const;
  void clear_bid_volume();
  static const int kBidVolumeFieldNumber = 27;
  ::google::protobuf::int32 bid_volume(int index) const;
  void set_bid_volume(int index, ::google::protobuf::int32 value);
  void add_bid_volume(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bid_volume() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bid_volume();

  // repeated double ask_price = 28;
  int ask_price_size() const;
  void clear_ask_price();
  static const int kAskPriceFieldNumber = 28;
  double ask_price(int index) const;
  void set_ask_price(int index, double value);
  void add_ask_price(double value);
  const ::google::protobuf::RepeatedField< double >&
      ask_price() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ask_price();

  // repeated int32 ask_volume = 29;
  int ask_volume_size() const;
  void clear_ask_volume();
  static const int kAskVolumeFieldNumber = 29;
  ::google::protobuf::int32 ask_volume(int index) const;
  void set_ask_volume(int index, ::google::protobuf::int32 value);
  void add_ask_volume(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ask_volume() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ask_volume();

  // @@protoc_insertion_point(class_scope:MarketUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 pre_close_;
  double open_price_;
  double last_price_;
  double highest_price_;
  double lowest_price_;
  double high_limit_price_;
  double low_limit_price_;
  double latest_price_;
  ::google::protobuf::int32 open_interest_;
  ::google::protobuf::int32 num_trades_;
  double turnover_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int64 total_bid_vol_;
  ::google::protobuf::int64 total_ask_vol_;
  ::google::protobuf::int32 weighted_avg_bid_price_;
  ::google::protobuf::int32 weighted_avg_ask_price_;
  ::google::protobuf::int32 iopv_;
  ::google::protobuf::int32 yield_to_maturity_;
  ::google::protobuf::internal::ArenaStringPtr exchange_timestamp_;
  ::google::protobuf::internal::ArenaStringPtr recv_timestamp_;
  ::google::protobuf::RepeatedField< double > bid_price_;
  mutable int _bid_price_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bid_volume_;
  mutable int _bid_volume_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > ask_price_;
  mutable int _ask_price_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ask_volume_;
  mutable int _ask_volume_cached_byte_size_;
  ::google::protobuf::int32 action_day_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoBufMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoBufMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

  void InitAsDefaultInstance();
  static MarketUpdate* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  inline Transaction* New() const { return New(NULL); }

  Transaction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional int32 action_day = 4;
  void clear_action_day();
  static const int kActionDayFieldNumber = 4;
  ::google::protobuf::int32 action_day() const;
  void set_action_day(::google::protobuf::int32 value);

  // optional int32 time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // optional int32 index = 6;
  void clear_index();
  static const int kIndexFieldNumber = 6;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int32 price = 7;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // optional int32 volume = 8;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional int32 turnover = 9;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 9;
  ::google::protobuf::int32 turnover() const;
  void set_turnover(::google::protobuf::int32 value);

  // optional int32 bsflag = 10;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 10;
  ::google::protobuf::int32 bsflag() const;
  void set_bsflag(::google::protobuf::int32 value);

  // optional string ch_order_kind = 11;
  void clear_ch_order_kind();
  static const int kChOrderKindFieldNumber = 11;
  const ::std::string& ch_order_kind() const;
  void set_ch_order_kind(const ::std::string& value);
  void set_ch_order_kind(const char* value);
  void set_ch_order_kind(const char* value, size_t size);
  ::std::string* mutable_ch_order_kind();
  ::std::string* release_ch_order_kind();
  void set_allocated_ch_order_kind(::std::string* ch_order_kind);

  // optional string ch_function_code = 12;
  void clear_ch_function_code();
  static const int kChFunctionCodeFieldNumber = 12;
  const ::std::string& ch_function_code() const;
  void set_ch_function_code(const ::std::string& value);
  void set_ch_function_code(const char* value);
  void set_ch_function_code(const char* value, size_t size);
  ::std::string* mutable_ch_function_code();
  ::std::string* release_ch_function_code();
  void set_allocated_ch_function_code(::std::string* ch_function_code);

  // optional int32 ask_order = 13;
  void clear_ask_order();
  static const int kAskOrderFieldNumber = 13;
  ::google::protobuf::int32 ask_order() const;
  void set_ask_order(::google::protobuf::int32 value);

  // optional int32 bid_order = 14;
  void clear_bid_order();
  static const int kBidOrderFieldNumber = 14;
  ::google::protobuf::int32 bid_order() const;
  void set_bid_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Transaction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int32 action_day_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 turnover_;
  ::google::protobuf::internal::ArenaStringPtr ch_order_kind_;
  ::google::protobuf::int32 bsflag_;
  ::google::protobuf::int32 ask_order_;
  ::google::protobuf::internal::ArenaStringPtr ch_function_code_;
  ::google::protobuf::int32 bid_order_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoBufMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoBufMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class IndexData : public ::google::protobuf::Message {
 public:
  IndexData();
  virtual ~IndexData();

  IndexData(const IndexData& from);

  inline IndexData& operator=(const IndexData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexData& default_instance();

  void Swap(IndexData* other);

  // implements Message ----------------------------------------------

  inline IndexData* New() const { return New(NULL); }

  IndexData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexData& from);
  void MergeFrom(const IndexData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional int32 action_day = 4;
  void clear_action_day();
  static const int kActionDayFieldNumber = 4;
  ::google::protobuf::int32 action_day() const;
  void set_action_day(::google::protobuf::int32 value);

  // optional int32 time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // optional int32 open_index = 6;
  void clear_open_index();
  static const int kOpenIndexFieldNumber = 6;
  ::google::protobuf::int32 open_index() const;
  void set_open_index(::google::protobuf::int32 value);

  // optional int32 high_index = 7;
  void clear_high_index();
  static const int kHighIndexFieldNumber = 7;
  ::google::protobuf::int32 high_index() const;
  void set_high_index(::google::protobuf::int32 value);

  // optional int32 low_index = 8;
  void clear_low_index();
  static const int kLowIndexFieldNumber = 8;
  ::google::protobuf::int32 low_index() const;
  void set_low_index(::google::protobuf::int32 value);

  // optional int32 last_index = 9;
  void clear_last_index();
  static const int kLastIndexFieldNumber = 9;
  ::google::protobuf::int32 last_index() const;
  void set_last_index(::google::protobuf::int32 value);

  // optional int64 total_volume = 10;
  void clear_total_volume();
  static const int kTotalVolumeFieldNumber = 10;
  ::google::protobuf::int64 total_volume() const;
  void set_total_volume(::google::protobuf::int64 value);

  // optional int64 turnover = 11;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 11;
  ::google::protobuf::int64 turnover() const;
  void set_turnover(::google::protobuf::int64 value);

  // optional int32 pre_close_index = 12;
  void clear_pre_close_index();
  static const int kPreCloseIndexFieldNumber = 12;
  ::google::protobuf::int32 pre_close_index() const;
  void set_pre_close_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IndexData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int32 action_day_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 open_index_;
  ::google::protobuf::int32 high_index_;
  ::google::protobuf::int32 low_index_;
  ::google::protobuf::int32 last_index_;
  ::google::protobuf::int64 total_volume_;
  ::google::protobuf::int64 turnover_;
  ::google::protobuf::int32 pre_close_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoBufMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoBufMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

  void InitAsDefaultInstance();
  static IndexData* default_instance_;
};
// -------------------------------------------------------------------

class DataRequest : public ::google::protobuf::Message {
 public:
  DataRequest();
  virtual ~DataRequest();

  DataRequest(const DataRequest& from);

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRequest& default_instance();

  void Swap(DataRequest* other);

  // implements Message ----------------------------------------------

  inline DataRequest* New() const { return New(NULL); }

  DataRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string data_type = 4;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  const ::std::string& data_type() const;
  void set_data_type(const ::std::string& value);
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  ::std::string* mutable_data_type();
  ::std::string* release_data_type();
  void set_allocated_data_type(::std::string* data_type);

  // @@protoc_insertion_point(class_scope:DataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr data_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoBufMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoBufMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoBufMsg_2eproto();

  void InitAsDefaultInstance();
  static DataRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageBase

// optional .MsgType type = 1;
inline void MessageBase::clear_type() {
  type_ = 0;
}
inline ::MsgType MessageBase::type() const {
  // @@protoc_insertion_point(field_get:MessageBase.type)
  return static_cast< ::MsgType >(type_);
}
inline void MessageBase::set_type(::MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MessageBase.type)
}

// optional bytes msg = 2;
inline void MessageBase::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageBase::msg() const {
  // @@protoc_insertion_point(field_get:MessageBase.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBase::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageBase.msg)
}
inline void MessageBase::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageBase.msg)
}
inline void MessageBase::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageBase.msg)
}
inline ::std::string* MessageBase::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:MessageBase.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageBase::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBase::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:MessageBase.msg)
}

// -------------------------------------------------------------------

// MarketUpdate

// optional string code = 1;
inline void MarketUpdate::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::code() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.code)
}
inline void MarketUpdate::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.code)
}
inline void MarketUpdate::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.code)
}
inline ::std::string* MarketUpdate::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_code() {
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.code)
}

// optional string symbol = 2;
inline void MarketUpdate::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::symbol() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.symbol)
}
inline void MarketUpdate::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.symbol)
}
inline void MarketUpdate::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.symbol)
}
inline ::std::string* MarketUpdate::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.symbol)
}

// optional string exchange = 3;
inline void MarketUpdate::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::exchange() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.exchange)
}
inline void MarketUpdate::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.exchange)
}
inline void MarketUpdate::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.exchange)
}
inline ::std::string* MarketUpdate::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_exchange() {
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.exchange)
}

// optional int32 status = 4;
inline void MarketUpdate::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::status() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.status)
  return status_;
}
inline void MarketUpdate::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.status)
}

// optional int32 pre_close = 5;
inline void MarketUpdate::clear_pre_close() {
  pre_close_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::pre_close() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.pre_close)
  return pre_close_;
}
inline void MarketUpdate::set_pre_close(::google::protobuf::int32 value) {
  
  pre_close_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.pre_close)
}

// optional double open_price = 6;
inline void MarketUpdate::clear_open_price() {
  open_price_ = 0;
}
inline double MarketUpdate::open_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.open_price)
  return open_price_;
}
inline void MarketUpdate::set_open_price(double value) {
  
  open_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.open_price)
}

// optional double last_price = 7;
inline void MarketUpdate::clear_last_price() {
  last_price_ = 0;
}
inline double MarketUpdate::last_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.last_price)
  return last_price_;
}
inline void MarketUpdate::set_last_price(double value) {
  
  last_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.last_price)
}

// optional double highest_price = 8;
inline void MarketUpdate::clear_highest_price() {
  highest_price_ = 0;
}
inline double MarketUpdate::highest_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.highest_price)
  return highest_price_;
}
inline void MarketUpdate::set_highest_price(double value) {
  
  highest_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.highest_price)
}

// optional double lowest_price = 9;
inline void MarketUpdate::clear_lowest_price() {
  lowest_price_ = 0;
}
inline double MarketUpdate::lowest_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.lowest_price)
  return lowest_price_;
}
inline void MarketUpdate::set_lowest_price(double value) {
  
  lowest_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.lowest_price)
}

// optional double high_limit_price = 10;
inline void MarketUpdate::clear_high_limit_price() {
  high_limit_price_ = 0;
}
inline double MarketUpdate::high_limit_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.high_limit_price)
  return high_limit_price_;
}
inline void MarketUpdate::set_high_limit_price(double value) {
  
  high_limit_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.high_limit_price)
}

// optional double low_limit_price = 11;
inline void MarketUpdate::clear_low_limit_price() {
  low_limit_price_ = 0;
}
inline double MarketUpdate::low_limit_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.low_limit_price)
  return low_limit_price_;
}
inline void MarketUpdate::set_low_limit_price(double value) {
  
  low_limit_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.low_limit_price)
}

// optional int32 open_interest = 12;
inline void MarketUpdate::clear_open_interest() {
  open_interest_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::open_interest() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.open_interest)
  return open_interest_;
}
inline void MarketUpdate::set_open_interest(::google::protobuf::int32 value) {
  
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.open_interest)
}

// optional double latest_price = 13;
inline void MarketUpdate::clear_latest_price() {
  latest_price_ = 0;
}
inline double MarketUpdate::latest_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.latest_price)
  return latest_price_;
}
inline void MarketUpdate::set_latest_price(double value) {
  
  latest_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.latest_price)
}

// optional int32 num_trades = 14;
inline void MarketUpdate::clear_num_trades() {
  num_trades_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::num_trades() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.num_trades)
  return num_trades_;
}
inline void MarketUpdate::set_num_trades(::google::protobuf::int32 value) {
  
  num_trades_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.num_trades)
}

// optional double turnover = 15;
inline void MarketUpdate::clear_turnover() {
  turnover_ = 0;
}
inline double MarketUpdate::turnover() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.turnover)
  return turnover_;
}
inline void MarketUpdate::set_turnover(double value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.turnover)
}

// optional int64 volume = 16;
inline void MarketUpdate::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketUpdate::volume() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.volume)
  return volume_;
}
inline void MarketUpdate::set_volume(::google::protobuf::int64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.volume)
}

// optional int64 total_bid_vol = 17;
inline void MarketUpdate::clear_total_bid_vol() {
  total_bid_vol_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketUpdate::total_bid_vol() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.total_bid_vol)
  return total_bid_vol_;
}
inline void MarketUpdate::set_total_bid_vol(::google::protobuf::int64 value) {
  
  total_bid_vol_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.total_bid_vol)
}

// optional int64 total_ask_vol = 18;
inline void MarketUpdate::clear_total_ask_vol() {
  total_ask_vol_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketUpdate::total_ask_vol() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.total_ask_vol)
  return total_ask_vol_;
}
inline void MarketUpdate::set_total_ask_vol(::google::protobuf::int64 value) {
  
  total_ask_vol_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.total_ask_vol)
}

// optional int32 weighted_avg_bid_price = 19;
inline void MarketUpdate::clear_weighted_avg_bid_price() {
  weighted_avg_bid_price_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::weighted_avg_bid_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.weighted_avg_bid_price)
  return weighted_avg_bid_price_;
}
inline void MarketUpdate::set_weighted_avg_bid_price(::google::protobuf::int32 value) {
  
  weighted_avg_bid_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.weighted_avg_bid_price)
}

// optional int32 weighted_avg_ask_price = 20;
inline void MarketUpdate::clear_weighted_avg_ask_price() {
  weighted_avg_ask_price_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::weighted_avg_ask_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.weighted_avg_ask_price)
  return weighted_avg_ask_price_;
}
inline void MarketUpdate::set_weighted_avg_ask_price(::google::protobuf::int32 value) {
  
  weighted_avg_ask_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.weighted_avg_ask_price)
}

// optional int32 iopv = 21;
inline void MarketUpdate::clear_iopv() {
  iopv_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::iopv() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.iopv)
  return iopv_;
}
inline void MarketUpdate::set_iopv(::google::protobuf::int32 value) {
  
  iopv_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.iopv)
}

// optional int32 yield_to_maturity = 22;
inline void MarketUpdate::clear_yield_to_maturity() {
  yield_to_maturity_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::yield_to_maturity() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.yield_to_maturity)
  return yield_to_maturity_;
}
inline void MarketUpdate::set_yield_to_maturity(::google::protobuf::int32 value) {
  
  yield_to_maturity_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.yield_to_maturity)
}

// optional int32 action_day = 23;
inline void MarketUpdate::clear_action_day() {
  action_day_ = 0;
}
inline ::google::protobuf::int32 MarketUpdate::action_day() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.action_day)
  return action_day_;
}
inline void MarketUpdate::set_action_day(::google::protobuf::int32 value) {
  
  action_day_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.action_day)
}

// optional string exchange_timestamp = 24;
inline void MarketUpdate::clear_exchange_timestamp() {
  exchange_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::exchange_timestamp() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.exchange_timestamp)
  return exchange_timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_exchange_timestamp(const ::std::string& value) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.exchange_timestamp)
}
inline void MarketUpdate::set_exchange_timestamp(const char* value) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.exchange_timestamp)
}
inline void MarketUpdate::set_exchange_timestamp(const char* value, size_t size) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.exchange_timestamp)
}
inline ::std::string* MarketUpdate::mutable_exchange_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.exchange_timestamp)
  return exchange_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_exchange_timestamp() {
  
  return exchange_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_exchange_timestamp(::std::string* exchange_timestamp) {
  if (exchange_timestamp != NULL) {
    
  } else {
    
  }
  exchange_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_timestamp);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.exchange_timestamp)
}

// optional string recv_timestamp = 25;
inline void MarketUpdate::clear_recv_timestamp() {
  recv_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketUpdate::recv_timestamp() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.recv_timestamp)
  return recv_timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_recv_timestamp(const ::std::string& value) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.recv_timestamp)
}
inline void MarketUpdate::set_recv_timestamp(const char* value) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.recv_timestamp)
}
inline void MarketUpdate::set_recv_timestamp(const char* value, size_t size) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.recv_timestamp)
}
inline ::std::string* MarketUpdate::mutable_recv_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.recv_timestamp)
  return recv_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketUpdate::release_recv_timestamp() {
  
  return recv_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketUpdate::set_allocated_recv_timestamp(::std::string* recv_timestamp) {
  if (recv_timestamp != NULL) {
    
  } else {
    
  }
  recv_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_timestamp);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.recv_timestamp)
}

// repeated double bid_price = 26;
inline int MarketUpdate::bid_price_size() const {
  return bid_price_.size();
}
inline void MarketUpdate::clear_bid_price() {
  bid_price_.Clear();
}
inline double MarketUpdate::bid_price(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.bid_price)
  return bid_price_.Get(index);
}
inline void MarketUpdate::set_bid_price(int index, double value) {
  bid_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.bid_price)
}
inline void MarketUpdate::add_bid_price(double value) {
  bid_price_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.bid_price)
}
inline const ::google::protobuf::RepeatedField< double >&
MarketUpdate::bid_price() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.bid_price)
  return bid_price_;
}
inline ::google::protobuf::RepeatedField< double >*
MarketUpdate::mutable_bid_price() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.bid_price)
  return &bid_price_;
}

// repeated int32 bid_volume = 27;
inline int MarketUpdate::bid_volume_size() const {
  return bid_volume_.size();
}
inline void MarketUpdate::clear_bid_volume() {
  bid_volume_.Clear();
}
inline ::google::protobuf::int32 MarketUpdate::bid_volume(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.bid_volume)
  return bid_volume_.Get(index);
}
inline void MarketUpdate::set_bid_volume(int index, ::google::protobuf::int32 value) {
  bid_volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.bid_volume)
}
inline void MarketUpdate::add_bid_volume(::google::protobuf::int32 value) {
  bid_volume_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.bid_volume)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarketUpdate::bid_volume() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.bid_volume)
  return bid_volume_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarketUpdate::mutable_bid_volume() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.bid_volume)
  return &bid_volume_;
}

// repeated double ask_price = 28;
inline int MarketUpdate::ask_price_size() const {
  return ask_price_.size();
}
inline void MarketUpdate::clear_ask_price() {
  ask_price_.Clear();
}
inline double MarketUpdate::ask_price(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.ask_price)
  return ask_price_.Get(index);
}
inline void MarketUpdate::set_ask_price(int index, double value) {
  ask_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.ask_price)
}
inline void MarketUpdate::add_ask_price(double value) {
  ask_price_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.ask_price)
}
inline const ::google::protobuf::RepeatedField< double >&
MarketUpdate::ask_price() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.ask_price)
  return ask_price_;
}
inline ::google::protobuf::RepeatedField< double >*
MarketUpdate::mutable_ask_price() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.ask_price)
  return &ask_price_;
}

// repeated int32 ask_volume = 29;
inline int MarketUpdate::ask_volume_size() const {
  return ask_volume_.size();
}
inline void MarketUpdate::clear_ask_volume() {
  ask_volume_.Clear();
}
inline ::google::protobuf::int32 MarketUpdate::ask_volume(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.ask_volume)
  return ask_volume_.Get(index);
}
inline void MarketUpdate::set_ask_volume(int index, ::google::protobuf::int32 value) {
  ask_volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.ask_volume)
}
inline void MarketUpdate::add_ask_volume(::google::protobuf::int32 value) {
  ask_volume_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.ask_volume)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarketUpdate::ask_volume() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.ask_volume)
  return ask_volume_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarketUpdate::mutable_ask_volume() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.ask_volume)
  return &ask_volume_;
}

// -------------------------------------------------------------------

// Transaction

// optional string code = 1;
inline void Transaction::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::code() const {
  // @@protoc_insertion_point(field_get:Transaction.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transaction.code)
}
inline void Transaction::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transaction.code)
}
inline void Transaction::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transaction.code)
}
inline ::std::string* Transaction::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:Transaction.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_code() {
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Transaction.code)
}

// optional string symbol = 2;
inline void Transaction::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::symbol() const {
  // @@protoc_insertion_point(field_get:Transaction.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transaction.symbol)
}
inline void Transaction::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transaction.symbol)
}
inline void Transaction::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transaction.symbol)
}
inline ::std::string* Transaction::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:Transaction.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:Transaction.symbol)
}

// optional string exchange = 3;
inline void Transaction::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::exchange() const {
  // @@protoc_insertion_point(field_get:Transaction.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transaction.exchange)
}
inline void Transaction::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transaction.exchange)
}
inline void Transaction::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transaction.exchange)
}
inline ::std::string* Transaction::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Transaction.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_exchange() {
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Transaction.exchange)
}

// optional int32 action_day = 4;
inline void Transaction::clear_action_day() {
  action_day_ = 0;
}
inline ::google::protobuf::int32 Transaction::action_day() const {
  // @@protoc_insertion_point(field_get:Transaction.action_day)
  return action_day_;
}
inline void Transaction::set_action_day(::google::protobuf::int32 value) {
  
  action_day_ = value;
  // @@protoc_insertion_point(field_set:Transaction.action_day)
}

// optional int32 time = 5;
inline void Transaction::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 Transaction::time() const {
  // @@protoc_insertion_point(field_get:Transaction.time)
  return time_;
}
inline void Transaction::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Transaction.time)
}

// optional int32 index = 6;
inline void Transaction::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Transaction::index() const {
  // @@protoc_insertion_point(field_get:Transaction.index)
  return index_;
}
inline void Transaction::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Transaction.index)
}

// optional int32 price = 7;
inline void Transaction::clear_price() {
  price_ = 0;
}
inline ::google::protobuf::int32 Transaction::price() const {
  // @@protoc_insertion_point(field_get:Transaction.price)
  return price_;
}
inline void Transaction::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:Transaction.price)
}

// optional int32 volume = 8;
inline void Transaction::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 Transaction::volume() const {
  // @@protoc_insertion_point(field_get:Transaction.volume)
  return volume_;
}
inline void Transaction::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:Transaction.volume)
}

// optional int32 turnover = 9;
inline void Transaction::clear_turnover() {
  turnover_ = 0;
}
inline ::google::protobuf::int32 Transaction::turnover() const {
  // @@protoc_insertion_point(field_get:Transaction.turnover)
  return turnover_;
}
inline void Transaction::set_turnover(::google::protobuf::int32 value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Transaction.turnover)
}

// optional int32 bsflag = 10;
inline void Transaction::clear_bsflag() {
  bsflag_ = 0;
}
inline ::google::protobuf::int32 Transaction::bsflag() const {
  // @@protoc_insertion_point(field_get:Transaction.bsflag)
  return bsflag_;
}
inline void Transaction::set_bsflag(::google::protobuf::int32 value) {
  
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:Transaction.bsflag)
}

// optional string ch_order_kind = 11;
inline void Transaction::clear_ch_order_kind() {
  ch_order_kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::ch_order_kind() const {
  // @@protoc_insertion_point(field_get:Transaction.ch_order_kind)
  return ch_order_kind_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_ch_order_kind(const ::std::string& value) {
  
  ch_order_kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transaction.ch_order_kind)
}
inline void Transaction::set_ch_order_kind(const char* value) {
  
  ch_order_kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transaction.ch_order_kind)
}
inline void Transaction::set_ch_order_kind(const char* value, size_t size) {
  
  ch_order_kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transaction.ch_order_kind)
}
inline ::std::string* Transaction::mutable_ch_order_kind() {
  
  // @@protoc_insertion_point(field_mutable:Transaction.ch_order_kind)
  return ch_order_kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_ch_order_kind() {
  
  return ch_order_kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_ch_order_kind(::std::string* ch_order_kind) {
  if (ch_order_kind != NULL) {
    
  } else {
    
  }
  ch_order_kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch_order_kind);
  // @@protoc_insertion_point(field_set_allocated:Transaction.ch_order_kind)
}

// optional string ch_function_code = 12;
inline void Transaction::clear_ch_function_code() {
  ch_function_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::ch_function_code() const {
  // @@protoc_insertion_point(field_get:Transaction.ch_function_code)
  return ch_function_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_ch_function_code(const ::std::string& value) {
  
  ch_function_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transaction.ch_function_code)
}
inline void Transaction::set_ch_function_code(const char* value) {
  
  ch_function_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transaction.ch_function_code)
}
inline void Transaction::set_ch_function_code(const char* value, size_t size) {
  
  ch_function_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transaction.ch_function_code)
}
inline ::std::string* Transaction::mutable_ch_function_code() {
  
  // @@protoc_insertion_point(field_mutable:Transaction.ch_function_code)
  return ch_function_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_ch_function_code() {
  
  return ch_function_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_ch_function_code(::std::string* ch_function_code) {
  if (ch_function_code != NULL) {
    
  } else {
    
  }
  ch_function_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch_function_code);
  // @@protoc_insertion_point(field_set_allocated:Transaction.ch_function_code)
}

// optional int32 ask_order = 13;
inline void Transaction::clear_ask_order() {
  ask_order_ = 0;
}
inline ::google::protobuf::int32 Transaction::ask_order() const {
  // @@protoc_insertion_point(field_get:Transaction.ask_order)
  return ask_order_;
}
inline void Transaction::set_ask_order(::google::protobuf::int32 value) {
  
  ask_order_ = value;
  // @@protoc_insertion_point(field_set:Transaction.ask_order)
}

// optional int32 bid_order = 14;
inline void Transaction::clear_bid_order() {
  bid_order_ = 0;
}
inline ::google::protobuf::int32 Transaction::bid_order() const {
  // @@protoc_insertion_point(field_get:Transaction.bid_order)
  return bid_order_;
}
inline void Transaction::set_bid_order(::google::protobuf::int32 value) {
  
  bid_order_ = value;
  // @@protoc_insertion_point(field_set:Transaction.bid_order)
}

// -------------------------------------------------------------------

// IndexData

// optional string code = 1;
inline void IndexData::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexData::code() const {
  // @@protoc_insertion_point(field_get:IndexData.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexData::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexData.code)
}
inline void IndexData::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexData.code)
}
inline void IndexData::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexData.code)
}
inline ::std::string* IndexData::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:IndexData.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexData::release_code() {
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexData::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:IndexData.code)
}

// optional string symbol = 2;
inline void IndexData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexData::symbol() const {
  // @@protoc_insertion_point(field_get:IndexData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexData.symbol)
}
inline void IndexData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexData.symbol)
}
inline void IndexData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexData.symbol)
}
inline ::std::string* IndexData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:IndexData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexData::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:IndexData.symbol)
}

// optional string exchange = 3;
inline void IndexData::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexData::exchange() const {
  // @@protoc_insertion_point(field_get:IndexData.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexData::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndexData.exchange)
}
inline void IndexData::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexData.exchange)
}
inline void IndexData::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexData.exchange)
}
inline ::std::string* IndexData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:IndexData.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexData::release_exchange() {
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:IndexData.exchange)
}

// optional int32 action_day = 4;
inline void IndexData::clear_action_day() {
  action_day_ = 0;
}
inline ::google::protobuf::int32 IndexData::action_day() const {
  // @@protoc_insertion_point(field_get:IndexData.action_day)
  return action_day_;
}
inline void IndexData::set_action_day(::google::protobuf::int32 value) {
  
  action_day_ = value;
  // @@protoc_insertion_point(field_set:IndexData.action_day)
}

// optional int32 time = 5;
inline void IndexData::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 IndexData::time() const {
  // @@protoc_insertion_point(field_get:IndexData.time)
  return time_;
}
inline void IndexData::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:IndexData.time)
}

// optional int32 open_index = 6;
inline void IndexData::clear_open_index() {
  open_index_ = 0;
}
inline ::google::protobuf::int32 IndexData::open_index() const {
  // @@protoc_insertion_point(field_get:IndexData.open_index)
  return open_index_;
}
inline void IndexData::set_open_index(::google::protobuf::int32 value) {
  
  open_index_ = value;
  // @@protoc_insertion_point(field_set:IndexData.open_index)
}

// optional int32 high_index = 7;
inline void IndexData::clear_high_index() {
  high_index_ = 0;
}
inline ::google::protobuf::int32 IndexData::high_index() const {
  // @@protoc_insertion_point(field_get:IndexData.high_index)
  return high_index_;
}
inline void IndexData::set_high_index(::google::protobuf::int32 value) {
  
  high_index_ = value;
  // @@protoc_insertion_point(field_set:IndexData.high_index)
}

// optional int32 low_index = 8;
inline void IndexData::clear_low_index() {
  low_index_ = 0;
}
inline ::google::protobuf::int32 IndexData::low_index() const {
  // @@protoc_insertion_point(field_get:IndexData.low_index)
  return low_index_;
}
inline void IndexData::set_low_index(::google::protobuf::int32 value) {
  
  low_index_ = value;
  // @@protoc_insertion_point(field_set:IndexData.low_index)
}

// optional int32 last_index = 9;
inline void IndexData::clear_last_index() {
  last_index_ = 0;
}
inline ::google::protobuf::int32 IndexData::last_index() const {
  // @@protoc_insertion_point(field_get:IndexData.last_index)
  return last_index_;
}
inline void IndexData::set_last_index(::google::protobuf::int32 value) {
  
  last_index_ = value;
  // @@protoc_insertion_point(field_set:IndexData.last_index)
}

// optional int64 total_volume = 10;
inline void IndexData::clear_total_volume() {
  total_volume_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IndexData::total_volume() const {
  // @@protoc_insertion_point(field_get:IndexData.total_volume)
  return total_volume_;
}
inline void IndexData::set_total_volume(::google::protobuf::int64 value) {
  
  total_volume_ = value;
  // @@protoc_insertion_point(field_set:IndexData.total_volume)
}

// optional int64 turnover = 11;
inline void IndexData::clear_turnover() {
  turnover_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IndexData::turnover() const {
  // @@protoc_insertion_point(field_get:IndexData.turnover)
  return turnover_;
}
inline void IndexData::set_turnover(::google::protobuf::int64 value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:IndexData.turnover)
}

// optional int32 pre_close_index = 12;
inline void IndexData::clear_pre_close_index() {
  pre_close_index_ = 0;
}
inline ::google::protobuf::int32 IndexData::pre_close_index() const {
  // @@protoc_insertion_point(field_get:IndexData.pre_close_index)
  return pre_close_index_;
}
inline void IndexData::set_pre_close_index(::google::protobuf::int32 value) {
  
  pre_close_index_ = value;
  // @@protoc_insertion_point(field_set:IndexData.pre_close_index)
}

// -------------------------------------------------------------------

// DataRequest

// optional string code = 1;
inline void DataRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::code() const {
  // @@protoc_insertion_point(field_get:DataRequest.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.code)
}
inline void DataRequest::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.code)
}
inline void DataRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.code)
}
inline ::std::string* DataRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_code() {
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.code)
}

// optional string symbol = 2;
inline void DataRequest::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::symbol() const {
  // @@protoc_insertion_point(field_get:DataRequest.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.symbol)
}
inline void DataRequest::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.symbol)
}
inline void DataRequest::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.symbol)
}
inline ::std::string* DataRequest::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.symbol)
}

// optional string exchange = 3;
inline void DataRequest::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::exchange() const {
  // @@protoc_insertion_point(field_get:DataRequest.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.exchange)
}
inline void DataRequest::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.exchange)
}
inline void DataRequest::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.exchange)
}
inline ::std::string* DataRequest::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_exchange() {
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.exchange)
}

// optional string data_type = 4;
inline void DataRequest::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::data_type() const {
  // @@protoc_insertion_point(field_get:DataRequest.data_type)
  return data_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.data_type)
}
inline void DataRequest::set_data_type(const char* value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.data_type)
}
inline void DataRequest::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.data_type)
}
inline ::std::string* DataRequest::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_data_type() {
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.data_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgType>() {
  return ::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBufMsg_2eproto__INCLUDED
