// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBufMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBufMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessageBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBufMsg_2eproto() {
  protobuf_AddDesc_ProtoBufMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBufMsg.proto");
  GOOGLE_CHECK(file != NULL);
  MessageBase_descriptor_ = file->message_type(0);
  static const int MessageBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBase, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBase, msg_),
  };
  MessageBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageBase_descriptor_,
      MessageBase::default_instance_,
      MessageBase_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBase, _is_default_instance_));
  MarketUpdate_descriptor_ = file->message_type(1);
  static const int MarketUpdate_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, open_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, last_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, highest_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, lowest_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, high_limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, low_limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, open_interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, exchange_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, recv_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, bid_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, ask_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, ask_volume_),
  };
  MarketUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MarketUpdate_descriptor_,
      MarketUpdate::default_instance_,
      MarketUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(MarketUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketUpdate, _is_default_instance_));
  DataRequest_descriptor_ = file->message_type(2);
  static const int DataRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, data_type_),
  };
  DataRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataRequest_descriptor_,
      DataRequest::default_instance_,
      DataRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, _is_default_instance_));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBufMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageBase_descriptor_, &MessageBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MarketUpdate_descriptor_, &MarketUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataRequest_descriptor_, &DataRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBufMsg_2eproto() {
  delete MessageBase::default_instance_;
  delete MessageBase_reflection_;
  delete MarketUpdate::default_instance_;
  delete MarketUpdate_reflection_;
  delete DataRequest::default_instance_;
  delete DataRequest_reflection_;
}

void protobuf_AddDesc_ProtoBufMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoBufMsg.proto\"2\n\013MessageBase\022\026\n\004ty"
    "pe\030\001 \001(\0162\010.MsgType\022\013\n\003msg\030\002 \001(\014\"\201\003\n\014Mark"
    "etUpdate\022\014\n\004code\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022\020"
    "\n\010exchange\030\003 \001(\t\022\022\n\nopen_price\030\004 \001(\001\022\022\n\n"
    "last_price\030\005 \001(\001\022\025\n\rhighest_price\030\006 \001(\001\022"
    "\024\n\014lowest_price\030\007 \001(\001\022\030\n\020high_limit_pric"
    "e\030\010 \001(\001\022\027\n\017low_limit_price\030\t \001(\001\022\025\n\ropen"
    "_interest\030\n \001(\005\022\020\n\010turnover\030\013 \001(\001\022\016\n\006vol"
    "ume\030\014 \001(\005\022\032\n\022exchange_timestamp\030\r \001(\t\022\026\n"
    "\016recv_timestamp\030\016 \001(\t\022\021\n\tbid_price\030\017 \003(\001"
    "\022\022\n\nbid_volume\030\020 \003(\005\022\021\n\task_price\030\021 \003(\001\022"
    "\022\n\nask_volume\030\022 \003(\005\"P\n\013DataRequest\022\014\n\004co"
    "de\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022\020\n\010exchange\030\003 \001"
    "(\t\022\021\n\tdata_type\030\004 \001(\t*6\n\007MsgType\022\025\n\021TYPE"
    "_MARKETUPDATE\020\000\022\024\n\020TYPE_DATAREQUEST\020\001b\006p"
    "roto3", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBufMsg.proto", &protobuf_RegisterTypes);
  MessageBase::default_instance_ = new MessageBase();
  MarketUpdate::default_instance_ = new MarketUpdate();
  DataRequest::default_instance_ = new DataRequest();
  MessageBase::default_instance_->InitAsDefaultInstance();
  MarketUpdate::default_instance_->InitAsDefaultInstance();
  DataRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBufMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBufMsg_2eproto {
  StaticDescriptorInitializer_ProtoBufMsg_2eproto() {
    protobuf_AddDesc_ProtoBufMsg_2eproto();
  }
} static_descriptor_initializer_ProtoBufMsg_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageBase::kTypeFieldNumber;
const int MessageBase::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageBase::MessageBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageBase)
}

void MessageBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageBase::MessageBase(const MessageBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageBase)
}

void MessageBase::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessageBase::~MessageBase() {
  // @@protoc_insertion_point(destructor:MessageBase)
  SharedDtor();
}

void MessageBase::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageBase_descriptor_;
}

const MessageBase& MessageBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufMsg_2eproto();
  return *default_instance_;
}

MessageBase* MessageBase::default_instance_ = NULL;

MessageBase* MessageBase::New(::google::protobuf::Arena* arena) const {
  MessageBase* n = new MessageBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageBase::Clear() {
  type_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MessageBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageBase)
  return false;
#undef DO_
}

void MessageBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageBase)
  // optional .MsgType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:MessageBase)
}

::google::protobuf::uint8* MessageBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageBase)
  // optional .MsgType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MessageBase)
  return target;
}

int MessageBase::ByteSize() const {
  int total_size = 0;

  // optional .MsgType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageBase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageBase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageBase::MergeFrom(const MessageBase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void MessageBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBase::CopyFrom(const MessageBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBase::IsInitialized() const {

  return true;
}

void MessageBase::Swap(MessageBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageBase::InternalSwap(MessageBase* other) {
  std::swap(type_, other->type_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageBase_descriptor_;
  metadata.reflection = MessageBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageBase

// optional .MsgType type = 1;
void MessageBase::clear_type() {
  type_ = 0;
}
 ::MsgType MessageBase::type() const {
  // @@protoc_insertion_point(field_get:MessageBase.type)
  return static_cast< ::MsgType >(type_);
}
 void MessageBase::set_type(::MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MessageBase.type)
}

// optional bytes msg = 2;
void MessageBase::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageBase::msg() const {
  // @@protoc_insertion_point(field_get:MessageBase.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageBase::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageBase.msg)
}
 void MessageBase::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageBase.msg)
}
 void MessageBase::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageBase.msg)
}
 ::std::string* MessageBase::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:MessageBase.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageBase::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageBase::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:MessageBase.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketUpdate::kCodeFieldNumber;
const int MarketUpdate::kSymbolFieldNumber;
const int MarketUpdate::kExchangeFieldNumber;
const int MarketUpdate::kOpenPriceFieldNumber;
const int MarketUpdate::kLastPriceFieldNumber;
const int MarketUpdate::kHighestPriceFieldNumber;
const int MarketUpdate::kLowestPriceFieldNumber;
const int MarketUpdate::kHighLimitPriceFieldNumber;
const int MarketUpdate::kLowLimitPriceFieldNumber;
const int MarketUpdate::kOpenInterestFieldNumber;
const int MarketUpdate::kTurnoverFieldNumber;
const int MarketUpdate::kVolumeFieldNumber;
const int MarketUpdate::kExchangeTimestampFieldNumber;
const int MarketUpdate::kRecvTimestampFieldNumber;
const int MarketUpdate::kBidPriceFieldNumber;
const int MarketUpdate::kBidVolumeFieldNumber;
const int MarketUpdate::kAskPriceFieldNumber;
const int MarketUpdate::kAskVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketUpdate::MarketUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarketUpdate)
}

void MarketUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MarketUpdate::MarketUpdate(const MarketUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarketUpdate)
}

void MarketUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_price_ = 0;
  last_price_ = 0;
  highest_price_ = 0;
  lowest_price_ = 0;
  high_limit_price_ = 0;
  low_limit_price_ = 0;
  open_interest_ = 0;
  turnover_ = 0;
  volume_ = 0;
  exchange_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketUpdate::~MarketUpdate() {
  // @@protoc_insertion_point(destructor:MarketUpdate)
  SharedDtor();
}

void MarketUpdate::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MarketUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketUpdate_descriptor_;
}

const MarketUpdate& MarketUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufMsg_2eproto();
  return *default_instance_;
}

MarketUpdate* MarketUpdate::default_instance_ = NULL;

MarketUpdate* MarketUpdate::New(::google::protobuf::Arena* arena) const {
  MarketUpdate* n = new MarketUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketUpdate::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MarketUpdate*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(open_price_, high_limit_price_);
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(low_limit_price_, volume_);
  exchange_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  bid_price_.Clear();
  bid_volume_.Clear();
  ask_price_.Clear();
  ask_volume_.Clear();
}

bool MarketUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarketUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MarketUpdate.code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional string symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MarketUpdate.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exchange;
        break;
      }

      // optional string exchange = 3;
      case 3: {
        if (tag == 26) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MarketUpdate.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_open_price;
        break;
      }

      // optional double open_price = 4;
      case 4: {
        if (tag == 33) {
         parse_open_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_last_price;
        break;
      }

      // optional double last_price = 5;
      case 5: {
        if (tag == 41) {
         parse_last_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_highest_price;
        break;
      }

      // optional double highest_price = 6;
      case 6: {
        if (tag == 49) {
         parse_highest_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highest_price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_lowest_price;
        break;
      }

      // optional double lowest_price = 7;
      case 7: {
        if (tag == 57) {
         parse_lowest_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowest_price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_high_limit_price;
        break;
      }

      // optional double high_limit_price = 8;
      case 8: {
        if (tag == 65) {
         parse_high_limit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_limit_price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_low_limit_price;
        break;
      }

      // optional double low_limit_price = 9;
      case 9: {
        if (tag == 73) {
         parse_low_limit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_limit_price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_open_interest;
        break;
      }

      // optional int32 open_interest = 10;
      case 10: {
        if (tag == 80) {
         parse_open_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_interest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_turnover;
        break;
      }

      // optional double turnover = 11;
      case 11: {
        if (tag == 89) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_volume;
        break;
      }

      // optional int32 volume = 12;
      case 12: {
        if (tag == 96) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_exchange_timestamp;
        break;
      }

      // optional string exchange_timestamp = 13;
      case 13: {
        if (tag == 106) {
         parse_exchange_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_timestamp().data(), this->exchange_timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MarketUpdate.exchange_timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_recv_timestamp;
        break;
      }

      // optional string recv_timestamp = 14;
      case 14: {
        if (tag == 114) {
         parse_recv_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_timestamp().data(), this->recv_timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MarketUpdate.recv_timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_bid_price;
        break;
      }

      // repeated double bid_price = 15;
      case 15: {
        if (tag == 122) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bid_price())));
        } else if (tag == 121) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 122, input, this->mutable_bid_price())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_bid_volume;
        break;
      }

      // repeated int32 bid_volume = 16;
      case 16: {
        if (tag == 130) {
         parse_bid_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bid_volume())));
        } else if (tag == 128) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 130, input, this->mutable_bid_volume())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ask_price;
        break;
      }

      // repeated double ask_price = 17;
      case 17: {
        if (tag == 138) {
         parse_ask_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ask_price())));
        } else if (tag == 137) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 138, input, this->mutable_ask_price())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_ask_volume;
        break;
      }

      // repeated int32 ask_volume = 18;
      case 18: {
        if (tag == 146) {
         parse_ask_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ask_volume())));
        } else if (tag == 144) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 146, input, this->mutable_ask_volume())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarketUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarketUpdate)
  return false;
#undef DO_
}

void MarketUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarketUpdate)
  // optional string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional string exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional double open_price = 4;
  if (this->open_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->open_price(), output);
  }

  // optional double last_price = 5;
  if (this->last_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->last_price(), output);
  }

  // optional double highest_price = 6;
  if (this->highest_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->highest_price(), output);
  }

  // optional double lowest_price = 7;
  if (this->lowest_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lowest_price(), output);
  }

  // optional double high_limit_price = 8;
  if (this->high_limit_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->high_limit_price(), output);
  }

  // optional double low_limit_price = 9;
  if (this->low_limit_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->low_limit_price(), output);
  }

  // optional int32 open_interest = 10;
  if (this->open_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->open_interest(), output);
  }

  // optional double turnover = 11;
  if (this->turnover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->turnover(), output);
  }

  // optional int32 volume = 12;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->volume(), output);
  }

  // optional string exchange_timestamp = 13;
  if (this->exchange_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_timestamp().data(), this->exchange_timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.exchange_timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->exchange_timestamp(), output);
  }

  // optional string recv_timestamp = 14;
  if (this->recv_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_timestamp().data(), this->recv_timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.recv_timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->recv_timestamp(), output);
  }

  // repeated double bid_price = 15;
  if (this->bid_price_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bid_price_cached_byte_size_);
  }
  for (int i = 0; i < this->bid_price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->bid_price(i), output);
  }

  // repeated int32 bid_volume = 16;
  if (this->bid_volume_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bid_volume_cached_byte_size_);
  }
  for (int i = 0; i < this->bid_volume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bid_volume(i), output);
  }

  // repeated double ask_price = 17;
  if (this->ask_price_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(17, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ask_price_cached_byte_size_);
  }
  for (int i = 0; i < this->ask_price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->ask_price(i), output);
  }

  // repeated int32 ask_volume = 18;
  if (this->ask_volume_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(18, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ask_volume_cached_byte_size_);
  }
  for (int i = 0; i < this->ask_volume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ask_volume(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MarketUpdate)
}

::google::protobuf::uint8* MarketUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarketUpdate)
  // optional string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional double open_price = 4;
  if (this->open_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->open_price(), target);
  }

  // optional double last_price = 5;
  if (this->last_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->last_price(), target);
  }

  // optional double highest_price = 6;
  if (this->highest_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->highest_price(), target);
  }

  // optional double lowest_price = 7;
  if (this->lowest_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lowest_price(), target);
  }

  // optional double high_limit_price = 8;
  if (this->high_limit_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->high_limit_price(), target);
  }

  // optional double low_limit_price = 9;
  if (this->low_limit_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->low_limit_price(), target);
  }

  // optional int32 open_interest = 10;
  if (this->open_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->open_interest(), target);
  }

  // optional double turnover = 11;
  if (this->turnover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->turnover(), target);
  }

  // optional int32 volume = 12;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->volume(), target);
  }

  // optional string exchange_timestamp = 13;
  if (this->exchange_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_timestamp().data(), this->exchange_timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.exchange_timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->exchange_timestamp(), target);
  }

  // optional string recv_timestamp = 14;
  if (this->recv_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_timestamp().data(), this->recv_timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketUpdate.recv_timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->recv_timestamp(), target);
  }

  // repeated double bid_price = 15;
  if (this->bid_price_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bid_price_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bid_price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->bid_price(i), target);
  }

  // repeated int32 bid_volume = 16;
  if (this->bid_volume_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bid_volume_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bid_volume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bid_volume(i), target);
  }

  // repeated double ask_price = 17;
  if (this->ask_price_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ask_price_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ask_price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ask_price(i), target);
  }

  // repeated int32 ask_volume = 18;
  if (this->ask_volume_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      18,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ask_volume_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ask_volume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ask_volume(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MarketUpdate)
  return target;
}

int MarketUpdate::ByteSize() const {
  int total_size = 0;

  // optional string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // optional string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional double open_price = 4;
  if (this->open_price() != 0) {
    total_size += 1 + 8;
  }

  // optional double last_price = 5;
  if (this->last_price() != 0) {
    total_size += 1 + 8;
  }

  // optional double highest_price = 6;
  if (this->highest_price() != 0) {
    total_size += 1 + 8;
  }

  // optional double lowest_price = 7;
  if (this->lowest_price() != 0) {
    total_size += 1 + 8;
  }

  // optional double high_limit_price = 8;
  if (this->high_limit_price() != 0) {
    total_size += 1 + 8;
  }

  // optional double low_limit_price = 9;
  if (this->low_limit_price() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 open_interest = 10;
  if (this->open_interest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_interest());
  }

  // optional double turnover = 11;
  if (this->turnover() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 volume = 12;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // optional string exchange_timestamp = 13;
  if (this->exchange_timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_timestamp());
  }

  // optional string recv_timestamp = 14;
  if (this->recv_timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_timestamp());
  }

  // repeated double bid_price = 15;
  {
    int data_size = 0;
    data_size = 8 * this->bid_price_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bid_price_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 bid_volume = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->bid_volume_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bid_volume(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bid_volume_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double ask_price = 17;
  {
    int data_size = 0;
    data_size = 8 * this->ask_price_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ask_price_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 ask_volume = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->ask_volume_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ask_volume(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ask_volume_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MarketUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketUpdate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketUpdate::MergeFrom(const MarketUpdate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bid_price_.MergeFrom(from.bid_price_);
  bid_volume_.MergeFrom(from.bid_volume_);
  ask_price_.MergeFrom(from.ask_price_);
  ask_volume_.MergeFrom(from.ask_volume_);
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.open_price() != 0) {
    set_open_price(from.open_price());
  }
  if (from.last_price() != 0) {
    set_last_price(from.last_price());
  }
  if (from.highest_price() != 0) {
    set_highest_price(from.highest_price());
  }
  if (from.lowest_price() != 0) {
    set_lowest_price(from.lowest_price());
  }
  if (from.high_limit_price() != 0) {
    set_high_limit_price(from.high_limit_price());
  }
  if (from.low_limit_price() != 0) {
    set_low_limit_price(from.low_limit_price());
  }
  if (from.open_interest() != 0) {
    set_open_interest(from.open_interest());
  }
  if (from.turnover() != 0) {
    set_turnover(from.turnover());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.exchange_timestamp().size() > 0) {

    exchange_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_timestamp_);
  }
  if (from.recv_timestamp().size() > 0) {

    recv_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_timestamp_);
  }
}

void MarketUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketUpdate::CopyFrom(const MarketUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketUpdate::IsInitialized() const {

  return true;
}

void MarketUpdate::Swap(MarketUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketUpdate::InternalSwap(MarketUpdate* other) {
  code_.Swap(&other->code_);
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  std::swap(open_price_, other->open_price_);
  std::swap(last_price_, other->last_price_);
  std::swap(highest_price_, other->highest_price_);
  std::swap(lowest_price_, other->lowest_price_);
  std::swap(high_limit_price_, other->high_limit_price_);
  std::swap(low_limit_price_, other->low_limit_price_);
  std::swap(open_interest_, other->open_interest_);
  std::swap(turnover_, other->turnover_);
  std::swap(volume_, other->volume_);
  exchange_timestamp_.Swap(&other->exchange_timestamp_);
  recv_timestamp_.Swap(&other->recv_timestamp_);
  bid_price_.UnsafeArenaSwap(&other->bid_price_);
  bid_volume_.UnsafeArenaSwap(&other->bid_volume_);
  ask_price_.UnsafeArenaSwap(&other->ask_price_);
  ask_volume_.UnsafeArenaSwap(&other->ask_volume_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarketUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketUpdate_descriptor_;
  metadata.reflection = MarketUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketUpdate

// optional string code = 1;
void MarketUpdate::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MarketUpdate::code() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.code)
}
 void MarketUpdate::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.code)
}
 void MarketUpdate::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.code)
}
 ::std::string* MarketUpdate::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MarketUpdate::release_code() {
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.code)
}

// optional string symbol = 2;
void MarketUpdate::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MarketUpdate::symbol() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.symbol)
}
 void MarketUpdate::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.symbol)
}
 void MarketUpdate::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.symbol)
}
 ::std::string* MarketUpdate::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MarketUpdate::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.symbol)
}

// optional string exchange = 3;
void MarketUpdate::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MarketUpdate::exchange() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.exchange)
}
 void MarketUpdate::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.exchange)
}
 void MarketUpdate::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.exchange)
}
 ::std::string* MarketUpdate::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MarketUpdate::release_exchange() {
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.exchange)
}

// optional double open_price = 4;
void MarketUpdate::clear_open_price() {
  open_price_ = 0;
}
 double MarketUpdate::open_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.open_price)
  return open_price_;
}
 void MarketUpdate::set_open_price(double value) {
  
  open_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.open_price)
}

// optional double last_price = 5;
void MarketUpdate::clear_last_price() {
  last_price_ = 0;
}
 double MarketUpdate::last_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.last_price)
  return last_price_;
}
 void MarketUpdate::set_last_price(double value) {
  
  last_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.last_price)
}

// optional double highest_price = 6;
void MarketUpdate::clear_highest_price() {
  highest_price_ = 0;
}
 double MarketUpdate::highest_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.highest_price)
  return highest_price_;
}
 void MarketUpdate::set_highest_price(double value) {
  
  highest_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.highest_price)
}

// optional double lowest_price = 7;
void MarketUpdate::clear_lowest_price() {
  lowest_price_ = 0;
}
 double MarketUpdate::lowest_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.lowest_price)
  return lowest_price_;
}
 void MarketUpdate::set_lowest_price(double value) {
  
  lowest_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.lowest_price)
}

// optional double high_limit_price = 8;
void MarketUpdate::clear_high_limit_price() {
  high_limit_price_ = 0;
}
 double MarketUpdate::high_limit_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.high_limit_price)
  return high_limit_price_;
}
 void MarketUpdate::set_high_limit_price(double value) {
  
  high_limit_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.high_limit_price)
}

// optional double low_limit_price = 9;
void MarketUpdate::clear_low_limit_price() {
  low_limit_price_ = 0;
}
 double MarketUpdate::low_limit_price() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.low_limit_price)
  return low_limit_price_;
}
 void MarketUpdate::set_low_limit_price(double value) {
  
  low_limit_price_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.low_limit_price)
}

// optional int32 open_interest = 10;
void MarketUpdate::clear_open_interest() {
  open_interest_ = 0;
}
 ::google::protobuf::int32 MarketUpdate::open_interest() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.open_interest)
  return open_interest_;
}
 void MarketUpdate::set_open_interest(::google::protobuf::int32 value) {
  
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.open_interest)
}

// optional double turnover = 11;
void MarketUpdate::clear_turnover() {
  turnover_ = 0;
}
 double MarketUpdate::turnover() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.turnover)
  return turnover_;
}
 void MarketUpdate::set_turnover(double value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.turnover)
}

// optional int32 volume = 12;
void MarketUpdate::clear_volume() {
  volume_ = 0;
}
 ::google::protobuf::int32 MarketUpdate::volume() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.volume)
  return volume_;
}
 void MarketUpdate::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MarketUpdate.volume)
}

// optional string exchange_timestamp = 13;
void MarketUpdate::clear_exchange_timestamp() {
  exchange_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MarketUpdate::exchange_timestamp() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.exchange_timestamp)
  return exchange_timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_exchange_timestamp(const ::std::string& value) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.exchange_timestamp)
}
 void MarketUpdate::set_exchange_timestamp(const char* value) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.exchange_timestamp)
}
 void MarketUpdate::set_exchange_timestamp(const char* value, size_t size) {
  
  exchange_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.exchange_timestamp)
}
 ::std::string* MarketUpdate::mutable_exchange_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.exchange_timestamp)
  return exchange_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MarketUpdate::release_exchange_timestamp() {
  
  return exchange_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_allocated_exchange_timestamp(::std::string* exchange_timestamp) {
  if (exchange_timestamp != NULL) {
    
  } else {
    
  }
  exchange_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_timestamp);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.exchange_timestamp)
}

// optional string recv_timestamp = 14;
void MarketUpdate::clear_recv_timestamp() {
  recv_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MarketUpdate::recv_timestamp() const {
  // @@protoc_insertion_point(field_get:MarketUpdate.recv_timestamp)
  return recv_timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_recv_timestamp(const ::std::string& value) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MarketUpdate.recv_timestamp)
}
 void MarketUpdate::set_recv_timestamp(const char* value) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MarketUpdate.recv_timestamp)
}
 void MarketUpdate::set_recv_timestamp(const char* value, size_t size) {
  
  recv_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MarketUpdate.recv_timestamp)
}
 ::std::string* MarketUpdate::mutable_recv_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:MarketUpdate.recv_timestamp)
  return recv_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MarketUpdate::release_recv_timestamp() {
  
  return recv_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketUpdate::set_allocated_recv_timestamp(::std::string* recv_timestamp) {
  if (recv_timestamp != NULL) {
    
  } else {
    
  }
  recv_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_timestamp);
  // @@protoc_insertion_point(field_set_allocated:MarketUpdate.recv_timestamp)
}

// repeated double bid_price = 15;
int MarketUpdate::bid_price_size() const {
  return bid_price_.size();
}
void MarketUpdate::clear_bid_price() {
  bid_price_.Clear();
}
 double MarketUpdate::bid_price(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.bid_price)
  return bid_price_.Get(index);
}
 void MarketUpdate::set_bid_price(int index, double value) {
  bid_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.bid_price)
}
 void MarketUpdate::add_bid_price(double value) {
  bid_price_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.bid_price)
}
 const ::google::protobuf::RepeatedField< double >&
MarketUpdate::bid_price() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.bid_price)
  return bid_price_;
}
 ::google::protobuf::RepeatedField< double >*
MarketUpdate::mutable_bid_price() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.bid_price)
  return &bid_price_;
}

// repeated int32 bid_volume = 16;
int MarketUpdate::bid_volume_size() const {
  return bid_volume_.size();
}
void MarketUpdate::clear_bid_volume() {
  bid_volume_.Clear();
}
 ::google::protobuf::int32 MarketUpdate::bid_volume(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.bid_volume)
  return bid_volume_.Get(index);
}
 void MarketUpdate::set_bid_volume(int index, ::google::protobuf::int32 value) {
  bid_volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.bid_volume)
}
 void MarketUpdate::add_bid_volume(::google::protobuf::int32 value) {
  bid_volume_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.bid_volume)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarketUpdate::bid_volume() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.bid_volume)
  return bid_volume_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarketUpdate::mutable_bid_volume() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.bid_volume)
  return &bid_volume_;
}

// repeated double ask_price = 17;
int MarketUpdate::ask_price_size() const {
  return ask_price_.size();
}
void MarketUpdate::clear_ask_price() {
  ask_price_.Clear();
}
 double MarketUpdate::ask_price(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.ask_price)
  return ask_price_.Get(index);
}
 void MarketUpdate::set_ask_price(int index, double value) {
  ask_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.ask_price)
}
 void MarketUpdate::add_ask_price(double value) {
  ask_price_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.ask_price)
}
 const ::google::protobuf::RepeatedField< double >&
MarketUpdate::ask_price() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.ask_price)
  return ask_price_;
}
 ::google::protobuf::RepeatedField< double >*
MarketUpdate::mutable_ask_price() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.ask_price)
  return &ask_price_;
}

// repeated int32 ask_volume = 18;
int MarketUpdate::ask_volume_size() const {
  return ask_volume_.size();
}
void MarketUpdate::clear_ask_volume() {
  ask_volume_.Clear();
}
 ::google::protobuf::int32 MarketUpdate::ask_volume(int index) const {
  // @@protoc_insertion_point(field_get:MarketUpdate.ask_volume)
  return ask_volume_.Get(index);
}
 void MarketUpdate::set_ask_volume(int index, ::google::protobuf::int32 value) {
  ask_volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarketUpdate.ask_volume)
}
 void MarketUpdate::add_ask_volume(::google::protobuf::int32 value) {
  ask_volume_.Add(value);
  // @@protoc_insertion_point(field_add:MarketUpdate.ask_volume)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarketUpdate::ask_volume() const {
  // @@protoc_insertion_point(field_list:MarketUpdate.ask_volume)
  return ask_volume_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarketUpdate::mutable_ask_volume() {
  // @@protoc_insertion_point(field_mutable_list:MarketUpdate.ask_volume)
  return &ask_volume_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataRequest::kCodeFieldNumber;
const int DataRequest::kSymbolFieldNumber;
const int DataRequest::kExchangeFieldNumber;
const int DataRequest::kDataTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataRequest::DataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataRequest)
}

void DataRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataRequest::DataRequest(const DataRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataRequest)
}

void DataRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataRequest::~DataRequest() {
  // @@protoc_insertion_point(destructor:DataRequest)
  SharedDtor();
}

void DataRequest::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataRequest_descriptor_;
}

const DataRequest& DataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufMsg_2eproto();
  return *default_instance_;
}

DataRequest* DataRequest::default_instance_ = NULL;

DataRequest* DataRequest::New(::google::protobuf::Arena* arena) const {
  DataRequest* n = new DataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataRequest::Clear() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataRequest.code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional string symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataRequest.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exchange;
        break;
      }

      // optional string exchange = 3;
      case 3: {
        if (tag == 26) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataRequest.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data_type;
        break;
      }

      // optional string data_type = 4;
      case 4: {
        if (tag == 34) {
         parse_data_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_type().data(), this->data_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataRequest.data_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataRequest)
  return false;
#undef DO_
}

void DataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataRequest)
  // optional string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataRequest.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataRequest.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional string exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataRequest.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional string data_type = 4;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), this->data_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataRequest.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataRequest)
}

::google::protobuf::uint8* DataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataRequest)
  // optional string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataRequest.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataRequest.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataRequest.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional string data_type = 4;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), this->data_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataRequest.data_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataRequest)
  return target;
}

int DataRequest::ByteSize() const {
  int total_size = 0;

  // optional string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // optional string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string data_type = 4;
  if (this->data_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataRequest::MergeFrom(const DataRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.data_type().size() > 0) {

    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
}

void DataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRequest::CopyFrom(const DataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequest::IsInitialized() const {

  return true;
}

void DataRequest::Swap(DataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataRequest::InternalSwap(DataRequest* other) {
  code_.Swap(&other->code_);
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  data_type_.Swap(&other->data_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataRequest_descriptor_;
  metadata.reflection = DataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataRequest

// optional string code = 1;
void DataRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataRequest::code() const {
  // @@protoc_insertion_point(field_get:DataRequest.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.code)
}
 void DataRequest::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.code)
}
 void DataRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.code)
}
 ::std::string* DataRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataRequest::release_code() {
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.code)
}

// optional string symbol = 2;
void DataRequest::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataRequest::symbol() const {
  // @@protoc_insertion_point(field_get:DataRequest.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataRequest::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.symbol)
}
 void DataRequest::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.symbol)
}
 void DataRequest::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.symbol)
}
 ::std::string* DataRequest::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataRequest::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataRequest::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.symbol)
}

// optional string exchange = 3;
void DataRequest::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataRequest::exchange() const {
  // @@protoc_insertion_point(field_get:DataRequest.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataRequest::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.exchange)
}
 void DataRequest::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.exchange)
}
 void DataRequest::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.exchange)
}
 ::std::string* DataRequest::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataRequest::release_exchange() {
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataRequest::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.exchange)
}

// optional string data_type = 4;
void DataRequest::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataRequest::data_type() const {
  // @@protoc_insertion_point(field_get:DataRequest.data_type)
  return data_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataRequest::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataRequest.data_type)
}
 void DataRequest::set_data_type(const char* value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataRequest.data_type)
}
 void DataRequest::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataRequest.data_type)
}
 ::std::string* DataRequest::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:DataRequest.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataRequest::release_data_type() {
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataRequest::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:DataRequest.data_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
